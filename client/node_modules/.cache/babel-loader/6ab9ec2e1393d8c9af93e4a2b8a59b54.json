{"ast":null,"code":"import decode from 'jwt-decode';\nimport axios from 'axios';\nexport default class AuthService {\n  constructor() {\n    this.login = (email, password) => {\n      // Get a token\n      return axios.post('api/login', {\n        email: email,\n        password: password\n      }).then(res => {\n        // set the token once the user logs in\n        this.setToken(res.data.token); // return the rest of the response\n\n        return res;\n      });\n    };\n\n    this.getProfile = () => {\n      return decode(this.getToken());\n    };\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  setToken(idToken) {\n    // Saves user token to localStorage\n    axios.defaults.headers.common['Authorization'] = \"Bearer \".concat(idToken);\n    localStorage.setItem('id_token', idToken);\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    axios.defaults.headers.common['Authorization'] = null;\n    localStorage.removeItem('id_token'); // this will reload the page and reset the state of the application\n\n    window.location.reload('/');\n  }\n\n}","map":{"version":3,"sources":["/Users/lauravilla/Documents/project3-fitness-tracker/client/src/components/AuthService.js"],"names":["decode","axios","AuthService","login","email","password","post","then","res","setToken","data","token","getProfile","getToken","loggedIn","isTokenExpired","decoded","exp","Date","now","err","idToken","defaults","headers","common","localStorage","setItem","getItem","logout","removeItem","window","location","reload"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,YAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,eAAe,MAAMC,WAAN,CAAkB;AAAA;AAAA,SAE7BC,KAF6B,GAErB,CAACC,KAAD,EAAQC,QAAR,KAAqB;AACzB;AACA,aAAOJ,KAAK,CAACK,IAAN,CAAW,WAAX,EAAwB;AAACF,QAAAA,KAAK,EAAEA,KAAR;AAAeC,QAAAA,QAAQ,EAAEA;AAAzB,OAAxB,EACNE,IADM,CACDC,GAAG,IAAI;AACT;AACA,aAAKC,QAAL,CAAcD,GAAG,CAACE,IAAJ,CAASC,KAAvB,EAFS,CAGT;;AACA,eAAOH,GAAP;AACH,OANM,CAAP;AAOH,KAX4B;;AAAA,SAa7BI,UAb6B,GAahB,MAAM;AACf,aAAOZ,MAAM,CAAC,KAAKa,QAAL,EAAD,CAAb;AACH,KAf4B;AAAA;;AAiB7BC,EAAAA,QAAQ,GAAG;AACP;AACA,UAAMH,KAAK,GAAG,KAAKE,QAAL,EAAd;AACA,WAAO,CAAC,CAACF,KAAF,IAAW,CAAC,KAAKI,cAAL,CAAoBJ,KAApB,CAAnB,CAHO,CAGuC;AACjD;;AAEDI,EAAAA,cAAc,CAACJ,KAAD,EAAQ;AAClB,QAAI;AACA,YAAMK,OAAO,GAAGhB,MAAM,CAACW,KAAD,CAAtB;;AACA,UAAIK,OAAO,CAACC,GAAR,GAAcC,IAAI,CAACC,GAAL,KAAa,IAA/B,EAAqC;AACjC,eAAO,IAAP;AACH,OAFD,MAII,OAAO,KAAP;AACP,KAPD,CAQA,OAAOC,GAAP,EAAY;AACR,aAAO,KAAP;AACH;AACJ;;AAEDX,EAAAA,QAAQ,CAACY,OAAD,EAAU;AACd;AACApB,IAAAA,KAAK,CAACqB,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8B,eAA9B,qBAA2DH,OAA3D;AACAI,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCL,OAAjC;AACH;;AAEDR,EAAAA,QAAQ,GAAG;AACP;AACA,WAAOY,YAAY,CAACE,OAAb,CAAqB,UAArB,CAAP;AACH;;AAEDC,EAAAA,MAAM,GAAG;AACL;AACA3B,IAAAA,KAAK,CAACqB,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8B,eAA9B,IAAiD,IAAjD;AACAC,IAAAA,YAAY,CAACI,UAAb,CAAwB,UAAxB,EAHK,CAIL;;AACAC,IAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,GAAvB;AACH;;AAtD4B","sourcesContent":["import decode from 'jwt-decode';\nimport axios from 'axios';\nexport default class AuthService {\n\n    login = (email, password) => {\n        // Get a token\n        return axios.post('api/login', {email: email, password: password})\n        .then(res => {\n            // set the token once the user logs in\n            this.setToken(res.data.token);\n            // return the rest of the response\n            return res;\n        });\n    };\n\n    getProfile = () => {\n        return decode(this.getToken());\n    };\n\n    loggedIn() {\n        // Checks if there is a saved token and it's still valid\n        const token = this.getToken();\n        return !!token && !this.isTokenExpired(token) // handwaiving here\n    }\n\n    isTokenExpired(token) {\n        try {\n            const decoded = decode(token);\n            if (decoded.exp < Date.now() / 1000) {\n                return true;\n            }\n            else\n                return false;\n        }\n        catch (err) {\n            return false;\n        }\n    }\n\n    setToken(idToken) {\n        // Saves user token to localStorage\n        axios.defaults.headers.common['Authorization'] = `Bearer ${idToken}`;\n        localStorage.setItem('id_token', idToken);\n    }\n\n    getToken() {\n        // Retrieves the user token from localStorage\n        return localStorage.getItem('id_token');\n    }\n\n    logout() {\n        // Clear user token and profile data from localStorage\n        axios.defaults.headers.common['Authorization'] = null;\n        localStorage.removeItem('id_token');\n        // this will reload the page and reset the state of the application\n        window.location.reload('/');\n    }\n\n\n\n}"]},"metadata":{},"sourceType":"module"}